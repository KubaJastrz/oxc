/*
 * Codegen for `traverse`.
 *
 * Parses Rust AST type definitions from files in `src/ast`, and generates:
 * - `src/traverse/traverse.rs`
 * - `src/traverse/ancestor.rs`
 * - `src/traverse/walk.rs`
 *
 * This is a quick-and-dirty version written in JS for speed of implementation.
 * We should do this properly with a Rust build script using `syn` etc.
 */

import {readFile, writeFile} from 'fs/promises';
import {exec} from 'child_process';
import {join as pathJoin} from 'path';
import {fileURLToPath} from 'url';
import {promisify} from 'util';
import assert from 'assert';

const execAsync = promisify(exec);

const PREAMBLE = '// Generated by `scripts/build.mjs`.';

const types = await getTypesFromCode();

const traverseDirPath = pathJoin(fileURLToPath(import.meta.url), '../../src/traverse');
await writeToFile('traverse.rs', generateTraverseTraitCode(types));
await writeToFile('ancestor.rs', generateAncestorsCode(types));
await writeToFile('walk.rs', generateWalkFunctionsCode(types));

function generateTraverseTraitCode(types) {
    let traverseMethods = '';
    for (const type of Object.values(types)) {
        const snakeName = camelToSnake(type.name);
        const ty = toTypeName(type);
        traverseMethods += `
            #[inline]
            fn enter_${snakeName}(&mut self, node: &mut ${ty}, ctx: &TraverseCtx<'a>) {}
            #[inline]
            fn exit_${snakeName}(&mut self, node: &mut ${ty}, ctx: &TraverseCtx<'a>) {}
        `;
    }

    return `
        ${PREAMBLE}

        use oxc_allocator::Vec;

        use super::TraverseCtx;
        use crate::ast::*;

        #[allow(unused_variables)]
        pub trait Traverse<'a> {
            ${traverseMethods}

            #[inline]
            fn enter_statements(&mut self, node: &mut Vec<'a, Statement<'a>>, ctx: &TraverseCtx<'a>) {}
            #[inline]
            fn exit_statements(&mut self, node: &mut Vec<'a, Statement<'a>>, ctx: &TraverseCtx<'a>) {}
        }
    `;
}

function generateAncestorsCode(types) {
    let enumVariants = '',
        isFunctions = '',
        ancestorTypes = '';
    const variantNamesForStructs = Object.create(null),
        enumTypes = [];
    let discriminant = 0;
    for (const type of Object.values(types)) {
        if (type.kind === 'enum') {
            enumTypes.push(type);
            continue;
        }

        const typeNameScreaming = camelToScreaming(type.name),
            variantNames = [];
        let offsetVars = '',
            thisAncestorTypes = '';
        for (const field of type.fields) {
            if (!types[unwrapTypeName(field.type)]) continue;

            let methodsCode = '',
                hasLifetime = false;
            for (const otherField of type.fields) {
                if (otherField === field) continue;

                let {offsetVarName} = otherField;
                if (!offsetVarName) {
                    offsetVarName = `OFFSET_${typeNameScreaming}_${otherField.name.toUpperCase()}`;
                    otherField.offsetVarName = offsetVarName;
                    offsetVars += `const ${offsetVarName}: usize = offset_of!(${type.name}, ${otherField.rawName});\n`;
                }

                methodsCode += `
                    #[inline]
                    pub fn ${otherField.rawName}(&self) -> &${otherField.rawType} {
                        unsafe { &*(self.0.add(${offsetVarName}) as *const ${otherField.rawType}) }
                    }
                `;

                if (otherField.type !== otherField.rawType) hasLifetime = true;
            }

            const lifetime = hasLifetime ? "<'a>" : '',
                structName = `${type.name}Without${snakeToCamel(field.name)}${lifetime}`;
            let structFields = 'pub(super) *const u8';
            if (hasLifetime) structFields += ", pub(super) PhantomData<&'a ()>";

            thisAncestorTypes += `
                #[repr(transparent)]
                #[derive(Debug)]
                pub struct ${structName}(${structFields});

                impl${lifetime} ${structName} {
                    ${methodsCode}
                }
            `;

            const variantName = `${type.name}${snakeToCamel(field.name)}`;
            variantNames.push(variantName);

            enumVariants += `${variantName}(${structName}) = ${discriminant},\n`;
            field.ancestorDiscriminant = discriminant;
            field.ancestorHasLifetime = hasLifetime;
            discriminant++;
        }

        ancestorTypes += `
            ${offsetVars}
            ${thisAncestorTypes}
        `;

        if (variantNames.length > 0) {
            variantNamesForStructs[type.name] = variantNames;
            isFunctions += `
                #[inline]
                pub fn is_${camelToSnake(type.name)}(&self) -> bool {
                    matches!(self, ${variantNames.map(name => `Self::${name}(_)`).join(' | ')})
                }
            `;
        }
    }

    for (const type of enumTypes) {
        const variantNames = [];
        for (const variant of type.variants) {
            const variantTypeName = unwrapTypeName(variant.type);
            variantNames.push(...(variantNamesForStructs[variantTypeName] || []));
        }

        if (variantNames.length > 0) {
            isFunctions += `
                #[inline]
                pub fn is_${camelToSnake(type.name)}(&self) -> bool {
                    matches!(self, ${variantNames.map(name => `Self::${name}(_)`).join(' | ')})
                }
            `;
        }
    }

    return `
        ${PREAMBLE}

        #![allow(
            unsafe_code,
            clippy::missing_safety_doc,
            clippy::ptr_as_ptr,
            clippy::undocumented_unsafe_blocks,
            clippy::cast_ptr_alignment
        )]

        use std::{marker::PhantomData, mem::offset_of};

        use oxc_allocator::{Box, Vec};
        use oxc_span::{Atom, SourceType, Span};
        use oxc_syntax::operator::{
            AssignmentOperator, BinaryOperator, LogicalOperator, UnaryOperator, UpdateOperator,
        };

        use crate::ast::*;

        /// Ancestor type used in AST traversal.
        ///
        /// Encodes both the type of the parent, and child's location in the parent.
        /// i.e. variants for \`BinaryExpressionLeft\` and \`BinaryExpressionRight\`, not just \`BinaryExpression\`.
        #[repr(C, u16)]
        #[derive(Debug)]
        pub enum Ancestor<'a> {
            ${enumVariants}
        }

        impl<'a> Ancestor<'a> {
            ${isFunctions}
        }

        ${ancestorTypes}
    `;
}

function generateWalkFunctionsCode(types) {
    let walkMethods = '';
    for (const type of Object.values(types)) {
        const snakeName = camelToSnake(type.name),
            ty = toTypeName(type);
        if (type.kind === 'struct') {
            const visitedFields = type.fields.filter((field, index) => {
                field.index = index;
                return unwrapTypeName(field.type) in types;
            });

            const fieldsCodes = visitedFields.map((field, index) => {
                const otherField = field.index === 0 ? type.fields[1] : type.fields[field.index - 1],
                    fieldCamelName = snakeToCamel(field.name);
                const pushCode = `unsafe {
                    ctx.${index === 0 ? 'push_stack' : 'replace_stack'}(
                        Ancestor::${type.name}${fieldCamelName}(
                            ancestor::${type.name}Without${fieldCamelName}(
                                (&mut node.${otherField.rawName} as *const _ as *const u8)
                                    .sub(offset_of!(${type.name}, ${otherField.rawName}))
                                ${field.ancestorHasLifetime ? ', PhantomData' : ''}
                            )
                        )
                    )
                };\n`;
                
                const {name: fieldTypeName, wrappers: fieldTypeWrappers} = typeAndWrappers(field.type);

                if (fieldTypeWrappers[0] === 'Option') {
                    const remainingWrappers = fieldTypeWrappers.slice(1);
                    if (remainingWrappers[0] === 'Box') remainingWrappers.shift();

                    let walkCode;
                    if (remainingWrappers.length === 1 && remainingWrappers[0] === 'Vec') {
                        if (fieldTypeName === 'Statement') {
                            // Special case for `Option<Vec<Statement>>`
                            walkCode = `walk_statements(traverser, field, ctx);`;
                        } else {
                            walkCode = `
                                for item in field.iter_mut() {
                                    walk_${camelToSnake(fieldTypeName)}(traverser, item, ctx);
                                }
                            `.trim();
                        }
                    } else if (remainingWrappers.length > 0) {
                        walkCode = `todo!("TODO: ${field.type}");`;
                    } else {
                        walkCode = `walk_${camelToSnake(fieldTypeName)}(traverser, field, ctx);`;
                    }

                    const [preCode, postCode] = index === 0 ? [pushCode, ''] : ['', pushCode];
                    return `
                        ${preCode}
                        if let Some(field) = &mut node.${field.rawName} {
                            ${postCode}
                            ${walkCode}
                        }
                    `;
                }

                if (fieldTypeWrappers[0] === 'Vec') {
                    const remainingWrappers = fieldTypeWrappers.slice(1);

                    let walkVecCode;
                    if (remainingWrappers.length === 0 && fieldTypeName === 'Statement') {
                        // Special case for `Vec<Statement>`
                        walkVecCode = `walk_statements(traverser, &mut node.${field.rawName}, ctx);`
                    } else {
                        let walkCode = `walk_${camelToSnake(fieldTypeName)}(traverser, item, ctx);`,
                            iterModifier = '';
                        if (remainingWrappers.length === 1 && remainingWrappers[0] === 'Option') {
                            iterModifier = '.flatten()';
                        } else if (remainingWrappers.length > 0) {
                            walkCode = `todo!("TODO: ${field.type}");`;
                        }
                        walkVecCode = `
                            for item in node.${field.rawName}.iter_mut()${iterModifier} {
                                ${walkCode}
                            }
                        `.trim();
                    }

                    return `
                        ${pushCode}
                        ${walkVecCode}
                    `;
                }

                return `
                    ${pushCode}
                    walk_${camelToSnake(fieldTypeName)}(traverser, &mut node.${field.rawName}, ctx);
                `;
            });

            if (fieldsCodes.length > 0) fieldsCodes.push('unsafe { ctx.pop_stack() };');

            walkMethods += `
                pub(super) fn walk_${snakeName}<'a, Tr: Traverse<'a>>(
                    traverser: &mut Tr,
                    node: &mut ${ty},
                    ctx: &mut TraverseCtx<'a>
                ) {
                    traverser.enter_${snakeName}(node, ctx);
                    ${fieldsCodes.join('\n')}
                    traverser.exit_${snakeName}(node, ctx);
                }
            `.replace(/\n\s*\n+/g, '\n');
        } else if (type.kind === 'enum') {
            const variantCodes = type.variants.map((variant) => {
                const variantTypeName = unwrapTypeName(variant.type),
                    variantType = types[variantTypeName];
                const walkCode = variantType
                    ? `walk_${camelToSnake(variantTypeName)}(traverser, node, ctx)`
                    : `todo!("TODO: ${variant.type}")`;
                return `${type.name}::${variant.name}(node) => ${walkCode},`;
            });

            for (const inheritedTypeName of type.inherits) {
                const inheritedSnakeName = camelToSnake(inheritedTypeName);
                variantCodes.push(
                    `match_${inheritedSnakeName}!(${type.name}) => `
                    + `walk_${inheritedSnakeName}(traverser, node.to_${inheritedSnakeName}_mut(), ctx),`
                );
            }

            walkMethods += `
                pub(super) fn walk_${snakeName}<'a, Tr: Traverse<'a>>(traverser: &mut Tr, node: &mut ${ty}, ctx: &mut TraverseCtx<'a>) {
                    traverser.enter_${snakeName}(node, ctx);
                    match node {
                        ${variantCodes.join('\n')}
                    }
                    traverser.exit_${snakeName}(node, ctx);
                }
            `;
        } else {
            throw new Error(`Unexpected kind for ${type.name}`);
        }
    }

    return `
        ${PREAMBLE}

        #![allow(
            unsafe_code,
            clippy::missing_safety_doc,
            clippy::missing_panics_doc,
            clippy::undocumented_unsafe_blocks,
            clippy::semicolon_if_nothing_returned,
            clippy::ptr_as_ptr,
            clippy::borrow_as_ptr
        )]

        use std::{marker::PhantomData, mem::offset_of};

        use oxc_allocator::Vec;

        use super::{ancestor, Ancestor, Traverse, TraverseCtx};
        use crate::ast::*;

        ${walkMethods}

        pub(super) fn walk_statements<'a, Tr: Traverse<'a>>(
            traverser: &mut Tr,
            stmts: &mut Vec<'a, Statement<'a>>,
            ctx: &mut TraverseCtx<'a>
        ) {
            traverser.enter_statements(stmts, ctx);
            for stmt in stmts.iter_mut() {
                walk_statement(traverser, stmt, ctx);
            }
            traverser.exit_statements(stmts, ctx);
        }
    `;
}

async function getTypesFromCode() {
    const codeDirPath = pathJoin(fileURLToPath(import.meta.url), '../../src/ast/');
    const filenames = ['js.rs', 'jsx.rs', 'literal.rs', 'ts.rs'];

    // Parse type defs from Rust files
    const types = Object.create(null);
    for (const filename of filenames) {
        const code = await readFile(`${codeDirPath}${filename}`, 'utf8'),
            lines = code.split(/\r?\n/);
        for (let i = 0; i < lines.length; i++) {
            if (lines[i] === '#[visited_node]') {
                let match;
                while (true) {
                    match = lines[++i].match(/^pub (enum|struct) (.+?)(<'a>)? \{/);
                    if (match) break;
                }
                const [, kind, name, lifetimeStr] = match,
                    hasLifetime = !!lifetimeStr;
                const itemLines = [];
                while (true) {
                    const line = lines[++i].replace(/\/\/.*$/, '').replace(/\s+/g, ' ').trim();
                    if (line === '}') break;
                    if (line !== '') itemLines.push(line);
                }

                if (kind === 'enum') {
                    const variants = [],
                        inherits = [];
                    for (const line of itemLines) {
                        const match = line.match(/^(.+?)\((.+?)\)(?: ?= ?(\d+))?,$/);
                        if (match) {
                            let [, name, type, discriminant] = match;
                            type = type.replace(/<'a>/g, '').replace(/<'a,\s*/g, '<');
                            discriminant = discriminant ? +discriminant : null;
                            variants.push({name, type, discriminant});
                        } else {
                            const match2 = line.match(/^@inherit ([A-Za-z]+)$/);
                            assert(match2, `Cannot parse line ${i} in '${filename}' as enum variant: '${line}'`);
                            inherits.push(match2[1]);
                        }
                    }
                    types[name] = {kind: 'enum', name, hasLifetime, variants, inherits};
                } else {
                    const fields = [];
                    for (let i = 0; i < itemLines.length; i++) {
                        const line = itemLines[i];
                        if (line.startsWith('#[')) {
                            while (!itemLines[i].endsWith(']')) {
                                i++;
                            }
                            continue;
                        }

                        const match = line.match(/^pub ((?:r#)?([a-z_]+)): (.+),(?: ?\/\/.+)?$/);
                        assert(match, `Cannot parse line ${i} in '${filename}' as struct field: '${line}'`);
                        const [, rawName, name, rawType] = match,
                            type = rawType.replace(/<'a>/g, '').replace(/<'a, ?/g, '<');
                        fields.push({name, type, rawName, rawType});
                    }
                    types[name] = {kind: 'struct', name, hasLifetime, fields};
                }
            }
        }
    }
    return types;
}

function typeAndWrappers(name) {
    const wrappers = [];
    while (true) {
        const match = name.match(/^(.+?)<(.+)>$/);
        if (!match) break;
        wrappers.push(match[1]);
        name = match[2];
    }
    return {name, wrappers};
}

function unwrapTypeName(name) {
    return typeAndWrappers(name).name;
}

function toTypeName(type) {
    let ty = type.name;
    if (type.hasLifetime) ty += "<'a>";
    return ty;
}

function camelToSnake(name) {
    let prefixLen = 1;
    for (const prefix of ['TS', 'JSX', 'JS']) {
        if (name.startsWith(prefix)) {
            prefixLen = prefix.length;
            break;
        }
    }
    return name.slice(0, prefixLen).toLowerCase()
        + name.slice(prefixLen).replace(/[A-Z]/g, c => `_${c.toLowerCase()}`);
}

function camelToScreaming(name) {
    return camelToSnake(name).toUpperCase();
}

function snakeToCamel(name) {
    let prefixLen = 0;
    for (const prefix of ['TS', 'JSX', 'JS']) {
        if (name.startsWith(`${prefix.toLowerCase()}_`)) {
            prefixLen = prefix.length + 1;
            break;
        }
    }
    return name.slice(0, prefixLen + 1).toUpperCase()
        + name.slice(prefixLen + 1).replace(/_([a-z])/g, (_, c) => c.toUpperCase());
}

async function writeToFile(filename, code) {
    const path = pathJoin(traverseDirPath, filename);
    console.log('Saving:', path);
    await writeFile(path, code);
    await execAsync(`rustfmt ${JSON.stringify(path)}`);
}
